{"version":3,"sources":["components/NavBar.js","components/Launcher.js","components/ScrollTop.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","AppBar","position","color","Toolbar","IconButton","edge","className","aria-label","Typography","variant","href","id","Launcher","Container","bottom","right","ScrollToTop","props","children","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","target","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","ScrollTop","Fab","size","createMuiTheme","palette","primary","main","indigo","secondary","lightBlue","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,OA2BHK,EAvBA,WACX,IAAMC,EAAUV,IAChB,OACI,6BACI,kBAACW,EAAA,EAAD,CAAQC,SAAU,SAAUC,MAAO,WAC/B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,UAAWP,EAAQL,WAAYQ,MAAM,UAAUK,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAWP,EAAQF,OAA5C,eAGA,kBAACO,EAAA,EAAD,CAAYM,KAAM,sCACd,kBAAC,IAAD,CAAcR,MAAO,eAEzB,kBAACE,EAAA,EAAD,CAAYM,KAAK,iCAAiCR,MAAM,WAAU,kBAAC,IAAD,SAG1E,kBAACC,EAAA,EAAD,CAASQ,GAAG,yB,QCvBTC,EAdE,WACb,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,wCACA,0F,mGCDVxB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFS,SAAU,QACVa,OAAQvB,EAAMK,QAAQ,GACtBmB,MAAOxB,EAAMK,QAAQ,QAI7B,SAASoB,EAAYC,GAAQ,IAClBC,EAAYD,EAAZC,SACDnB,EAAUV,IACV8B,EAAUC,YAAiB,CAC7BC,mBAAmB,EACnBC,UAAW,MAaf,OACI,kBAACC,EAAA,EAAD,CAAMC,GAAIL,GACN,yBAAKM,QAZO,SAACC,GACjB,IAAMC,GAAUD,EAAME,OAAOC,eAAiBC,UAAUC,cAAc,uBAClEJ,GACAA,EAAOK,eAAe,CAClBC,SAAU,SACVC,MAAO,YAOgBC,KAAM,eAAgB7B,UAAWP,EAAQP,MAC/D0B,IAWjB,IAUekB,EAVG,SAACnB,GACf,OACI,kBAACD,EAAgBC,EACb,kBAACoB,EAAA,EAAD,CAAKnC,MAAM,YAAYoC,KAAK,QAAQ/B,aAAW,sBAC3C,kBAAC,IAAD,SCzCVhB,EAAQgD,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAMC,IAAO,MAEjBC,UAAW,CACPF,KAAMG,IAAU,SAoBbC,MAff,WACI,OACI,kBAAC,IAAD,CAAkBvD,MAAOA,GACrB,6BACI,kBAACwD,EAAA,EAAD,MACA,4BAAQzC,UAAU,cACd,kBAAC,EAAD,OAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,SClBI0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d40a3d2.chunk.js","sourcesContent":["import React from 'react';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FacebookIcon from '@material-ui/icons/Facebook';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    }\n}));\n\nconst NavBar = () => {\n    const classes = useStyles();\n    return (\n        <div>\n            <AppBar position={\"static\"} color={\"primary\"}>\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Al Ameen AR\n                    </Typography>\n                    <IconButton href={\"https://facebook.com/AlAmeen.Samar\"}>\n                        <FacebookIcon color={\"secondary\"}/>\n                    </IconButton>\n                    <IconButton href=\"https://github.com/amrameen769\" color=\"inherit\"><GitHubIcon/></IconButton>\n                </Toolbar>\n            </AppBar>\n            <Toolbar id=\"back-to-top-anchor\" />\n        </div>\n    );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport Container from \"@material-ui/core/Container\";\n\nconst Launcher = () => {\n    return (\n        <div>\n            <Container>\n                <h2>Launcher</h2>\n                <p>\n                    Hi, I am Al Ameen AR, this Website is Under Development.\n                </p>\n            </Container>\n\n        </div>\n    );\n};\n\nexport default Launcher;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useScrollTrigger, Zoom} from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2)\n    }\n}))\n\nfunction ScrollToTop(props) {\n    const {children} = props;\n    const classes = useStyles();\n    const trigger = useScrollTrigger({\n        disableHysteresis: true,\n        threshold: 100\n    });\n\n    const handleClick = (event) => {\n        const anchor = (event.target.ownerDocument || document).querySelector(\"#back-to-top-anchor\");\n        if (anchor) {\n            anchor.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\"\n            })\n        }\n    };\n\n    return (\n        <Zoom in={trigger}>\n            <div onClick={handleClick} role={\"presentation\"} className={classes.root}>\n                {children}\n            </div>\n        </Zoom>\n    )\n}\n\nScrollToTop.propTypes = {\n    children: PropTypes.element.isRequired,\n    window: PropTypes.func\n}\n\nconst ScrollTop = (props) => {\n    return (\n        <ScrollToTop {...props}>\n            <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\n                <KeyboardArrowUpIcon />\n            </Fab>\n        </ScrollToTop>\n    );\n};\n\nexport default ScrollTop;\n","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar\";\nimport Launcher from \"./components/Launcher\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport ScrollTop from \"./components/ScrollTop\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: indigo[500]\n        },\n        secondary: {\n            main: lightBlue[500]\n        }\n    }\n})\n\nfunction App() {\n    return (\n        <MuiThemeProvider theme={theme}>\n            <div>\n                <CssBaseline/>\n                <header className=\"App-header\">\n                    <NavBar/>\n                </header>\n                <Launcher/>\n                <ScrollTop />\n            </div>\n        </MuiThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}