{"version":3,"sources":["components/img/profilepic.jpg","components/NavBar.js","components/Launcher.js","components/ScrollTop.js","components/ProfileAvatar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","textAlign","NavBar","props","classes","AppBar","position","color","Toolbar","Typography","variant","className","IconButton","href","id","Launcher","Container","bottom","spacing","right","ScrollToTop","children","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","target","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","ScrollTop","Fab","size","aria-label","box","zIndex","profileAvatar","height","width","ProfileAvatar","Box","Avatar","src","profilepic","createMuiTheme","palette","primary","main","indigo","secondary","lightBlue","navBar","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,wC,iPCSrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHC,UAAW,SACXF,SAAU,OAwBHG,EApBA,SAACC,GACZ,IAAMC,EAAUT,IAChB,OACI,wBAASQ,EACL,kBAACE,EAAA,EAAD,CAAQC,SAAU,SAAUC,MAAO,WAC/B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWP,EAAQJ,OAA5C,eAGA,kBAACY,EAAA,EAAD,CAAYC,KAAM,sCACd,kBAAC,IAAD,CAAcN,MAAO,eAEzB,kBAACK,EAAA,EAAD,CAAYC,KAAK,iCAAiCN,MAAM,WAAU,kBAAC,IAAD,SAG1E,kBAACC,EAAA,EAAD,CAASM,GAAG,yB,QClBTC,EAbE,WACb,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,wCACA,0F,mGCDVrB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFQ,SAAU,QACVW,OAAQpB,EAAMqB,QAAQ,GACtBC,MAAOtB,EAAMqB,QAAQ,QAI7B,SAASE,EAAYjB,GAAQ,IAClBkB,EAAYlB,EAAZkB,SACDjB,EAAUT,IACV2B,EAAUC,YAAiB,CAC7BC,mBAAmB,EACnBC,UAAW,MAaf,OACI,kBAACC,EAAA,EAAD,CAAMC,GAAIL,GACN,yBAAKM,QAZO,SAACC,GACjB,IAAMC,GAAUD,EAAME,OAAOC,eAAiBC,UAAUC,cAAc,uBAClEJ,GACAA,EAAOK,eAAe,CAClBC,SAAU,SACVC,MAAO,YAOgBC,KAAM,eAAgB3B,UAAWP,EAAQN,MAC/DuB,IAWjB,IAUekB,EAVG,SAACpC,GACf,OACI,kBAACiB,EAAgBjB,EACb,kBAACqC,EAAA,EAAD,CAAKjC,MAAM,YAAYkC,KAAK,QAAQC,aAAW,sBAC3C,kBAAC,IAAD,S,iCC7CV/C,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC8C,IAAI,CACAC,OAAQ,UACRtC,SAAU,YAEduC,cAAe,CACXC,OAAQjD,EAAMqB,QAAQ,IACtB6B,MAAOlD,EAAMqB,QAAQ,SAYd8B,EATO,SAAC7C,GACnB,IAAMC,EAAUT,IAChB,OACI,kBAACsD,EAAA,EAAD,CAAKtC,UAAWP,EAAQuC,KACpB,kBAACO,EAAA,EAAD,CAAQvC,UAAWP,EAAQyC,cAAeM,IAAKC,QCRrDvD,EAAQwD,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAMC,IAAO,MAEjBC,UAAW,CACPF,KAAMG,IAAU,SAKtBhE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC+D,OAAO,CACHhB,OAAQ,aAsBDiB,MAlBf,WACI,IAAMzD,EAAUT,IAChB,OACI,kBAAC,IAAD,CAAkBE,MAAOA,GACrB,6BACI,kBAACiE,EAAA,EAAD,MACA,4BAAQnD,UAAU,cACd,kBAAC,EAAD,CAAQA,UAAWP,EAAQwD,SAC3B,kBAAC,EAAD,OAGJ,kBAAC,EAAD,MACA,kBAAC,EAAD,SC7BIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a76e6e41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepic.2c2dd91d.jpg\";","import React from 'react';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        textAlign: \"center\",\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nconst NavBar = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div {...props}>\r\n            <AppBar position={\"static\"} color={\"primary\"}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Al Ameen AR\r\n                    </Typography>\r\n                    <IconButton href={\"https://facebook.com/AlAmeen.Samar\"}>\r\n                        <FacebookIcon color={\"secondary\"}/>\r\n                    </IconButton>\r\n                    <IconButton href=\"https://github.com/amrameen769\" color=\"inherit\"><GitHubIcon/></IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar id=\"back-to-top-anchor\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst Launcher = () => {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h2>Launcher</h2>\r\n                <p>\r\n                    Hi, I am Al Ameen AR, this Website is Under Development.\r\n                </p>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Launcher;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useScrollTrigger, Zoom} from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2)\r\n    }\r\n}))\r\n\r\nfunction ScrollToTop(props) {\r\n    const {children} = props;\r\n    const classes = useStyles();\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 100\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        const anchor = (event.target.ownerDocument || document).querySelector(\"#back-to-top-anchor\");\r\n        if (anchor) {\r\n            anchor.scrollIntoView({\r\n                behavior: \"smooth\",\r\n                block: \"center\"\r\n            })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <div onClick={handleClick} role={\"presentation\"} className={classes.root}>\r\n                {children}\r\n            </div>\r\n        </Zoom>\r\n    )\r\n}\r\n\r\nScrollToTop.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    window: PropTypes.func\r\n}\r\n\r\nconst ScrollTop = (props) => {\r\n    return (\r\n        <ScrollToTop {...props}>\r\n            <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n                <KeyboardArrowUpIcon />\r\n            </Fab>\r\n        </ScrollToTop>\r\n    );\r\n};\r\n\r\nexport default ScrollTop;\r\n","import React from 'react';\r\nimport profilepic from \"./img/profilepic.jpg\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    box:{\r\n        zIndex: 'tooltip',\r\n        position: 'absolute',\r\n    },\r\n    profileAvatar: {\r\n        height: theme.spacing(20),\r\n        width: theme.spacing(20)\r\n    },\r\n}))\r\nconst ProfileAvatar = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.box}>\r\n            <Avatar className={classes.profileAvatar} src={profilepic} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ProfileAvatar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from \"./components/NavBar\";\r\nimport Launcher from \"./components/Launcher\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\r\nimport ScrollTop from \"./components/ScrollTop\";\r\nimport ProfileAvatar from \"./components/ProfileAvatar\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: indigo[500]\r\n        },\r\n        secondary: {\r\n            main: lightBlue[500]\r\n        }\r\n    }\r\n})\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    navBar:{\r\n        zIndex: \"modal\"\r\n    }\r\n}))\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    return (\r\n        <MuiThemeProvider theme={theme}>\r\n            <div>\r\n                <CssBaseline/>\r\n                <header className=\"App-header\">\r\n                    <NavBar className={classes.navBar}/>\r\n                    <ProfileAvatar/>\r\n                </header>\r\n\r\n                <Launcher/>\r\n                <ScrollTop/>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}